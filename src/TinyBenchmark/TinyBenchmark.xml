<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TinyBenchmark</name>
    </assembly>
    <members>
        <member name="P:TinyBenchmark.Analysis.BenchmarksScanner.Container">
            <summary>
            The benchmarks container reference.
            </summary>
        </member>
        <member name="P:TinyBenchmark.Analysis.BenchmarksScanner.Init">
            <summary>
            The benchmarks init reference, if available.
            </summary>
        </member>
        <member name="P:TinyBenchmark.Analysis.BenchmarksScanner.Benchmarks">
            <summary>
            The benchmark references, if any.
            </summary>
        </member>
        <member name="T:TinyBenchmark.Attributes.ArgumentsAttribute">
            <summary>
            Defines the benchmark arguments when the method accepts input values.
            The type and the number of arguments must be coherent with what the method expects.
            </summary>
        </member>
        <member name="M:TinyBenchmark.Attributes.ArgumentsAttribute.#ctor(System.Object[])">
            <summary>
            Defines the collection of arguments.
            </summary>
            <param name="arguments">The method's arguments.</param>
        </member>
        <member name="T:TinyBenchmark.Attributes.BenchmarkAttribute">
            <summary>
            Identifies a benchmark method.
            </summary>
        </member>
        <member name="P:TinyBenchmark.Attributes.BenchmarkAttribute.Name">
            <summary>
            The name of the benchmark that will be used in the reports: if not set, the name of the method will be used.
            </summary>
        </member>
        <member name="P:TinyBenchmark.Attributes.BenchmarkAttribute.Iterations">
            <summary>
            Defines how many iterations this benchmark will run, given the same parameters and arguments.
            This must be a positive value, and has a default of 1. Increasing the iterations may increase the accuracy of the results.
            </summary>
        </member>
        <member name="P:TinyBenchmark.Attributes.BenchmarkAttribute.Order">
            <summary>
            Defines the order by which the benchmark should run against the other benchmarks contained in the same class (container).
            The lower the value, the earlier the benchmark will be invoked.
            </summary>
        </member>
        <member name="P:TinyBenchmark.Attributes.BenchmarkAttribute.Baseline">
            <summary>
            Defines if this benchmark will be used as a baseline for comparing the other benchmarks contained in the same class (container).
            Only one benchmark per container can be a baseline.
            </summary>
        </member>
        <member name="T:TinyBenchmark.Attributes.BenchmarksContainerAttribute">
            <summary>
            Defines additional information about the class that contains the benchmarks.
            </summary>
        </member>
        <member name="P:TinyBenchmark.Attributes.BenchmarksContainerAttribute.Name">
            <summary>
            The name of the benchmarks container that will be used in the reports: if not set, the class name will be used.
            </summary>
        </member>
        <member name="T:TinyBenchmark.Attributes.InitAttribute">
            <summary>
            Identifies an initialization method to be executed before each benchmark in the class (container).
            </summary>
        </member>
        <member name="T:TinyBenchmark.Attributes.InitContainerAttribute">
            <summary>
            Identifies an initialization method to be executed once before every benchmark.
            </summary>
        </member>
        <member name="T:TinyBenchmark.Attributes.InitWithAttribute">
            <summary>
            Identifies an initialization method to be executed before the benchmark.
            This attribute is meant to be applied to a benchmark method.
            </summary>
        </member>
        <member name="P:TinyBenchmark.Attributes.InitWithAttribute.MethodName">
            <summary>
            An initialization method's name.
            </summary>
        </member>
        <member name="M:TinyBenchmark.Attributes.InitWithAttribute.#ctor(System.String)">
            <summary>
            Identifies an initialization method.
            </summary>
            <param name="methodName">The initialization method's name.</param>
        </member>
        <member name="T:TinyBenchmark.Attributes.ParamAttribute">
            <summary>
            Defines all the possible values of a property that will be used by all the benchmarks.
            </summary>
        </member>
        <member name="M:TinyBenchmark.Attributes.ParamAttribute.#ctor(System.Object[])">
            <summary>
            Defines all the possible values of a property.
            </summary>
            <param name="values">The property values that will be used by the benchmarks in the same class (container).</param>
        </member>
        <member name="T:TinyBenchmark.Attributes.WarmupWithAttribute">
            <summary>
            Identifies a warm-up method to be executed before the benchmark.
            This attribute is meant to be applied to a benchmark method.
            The time the warm-up method takes to executed won't be mixed with
            the actual benchmark's time, and it will be stored in a dedicated variable.
            </summary>
        </member>
        <member name="P:TinyBenchmark.Attributes.WarmupWithAttribute.MethodName">
            <summary>
            The name of the warm-up method for this benchmark.
            </summary>
        </member>
        <member name="P:TinyBenchmark.Attributes.WarmupWithAttribute.Order">
            <summary>
            Defines the order by which the wamu-up method should run against the other warm-up methods for this benchmark.
            </summary>
        </member>
        <member name="M:TinyBenchmark.Attributes.WarmupWithAttribute.#ctor(System.String)">
            <summary>
            Identifies a warm-up method to be executed before the benchmark.
            </summary>
            <param name="methodName">The warm-up method's name.</param>
        </member>
        <member name="T:TinyBenchmark.ExportExtensions">
            <summary>
            A set of extensions for reports and exporters.
            </summary>
        </member>
        <member name="M:TinyBenchmark.ExportExtensions.ExportWith``1(TinyBenchmark.IReport)">
            <summary>
            Create an export of a report with the given exporter type.
            </summary>
            <typeparam name="TExporter">The type of the exporter to use.</typeparam>
            <param name="report">The report.</param>
            <returns>The exported instance used on the report.</returns>
        </member>
        <member name="M:TinyBenchmark.ExportExtensions.ExportWith``1(TinyBenchmark.IReport,``0)">
            <summary>
            Create an export of a report with the given exporter instance.
            </summary>
            <typeparam name="TExporter">The type of the exporter.</typeparam>
            <param name="report">The report.</param>
            <param name="exporter">The exporter instance to use.</param>
        </member>
        <member name="M:TinyBenchmark.ExportExtensions.ExportAsText(TinyBenchmark.IReport,System.Boolean)">
            <summary>
            Create an export of a report with a <see cref="T:TinyBenchmark.TextExporter"/>.
            </summary>
            <param name="report"></param>
            <param name="includeIterations"></param>
            <returns>The resulting text export.</returns>
        </member>
        <member name="T:TinyBenchmark.IExporter">
            <summary>
            Defines a report exporter.
            </summary>
        </member>
        <member name="M:TinyBenchmark.IExporter.Visit(TinyBenchmark.BenchmarksContainerReport)">
            <summary>
            Visits a benchmarks container report to create an export.
            </summary>
            <param name="report">The benchmarks container report.</param>
        </member>
        <member name="M:TinyBenchmark.IExporter.Visit(TinyBenchmark.BenchmarkReport)">
            <summary>
            Visits a benchmark report to create an export.
            </summary>
            <param name="report">The benchmark report.</param>
        </member>
        <member name="M:TinyBenchmark.IExporter.Visit(TinyBenchmark.IterationReport)">
            <summary>
            Visits a benchmark iteration report to create an export.
            </summary>
            <param name="report">The benchmark iteration report.</param>
        </member>
        <member name="T:TinyBenchmark.TextExporter">
            <summary>
            Creates a text export of a report.
            </summary>
        </member>
        <member name="P:TinyBenchmark.TextExporter.IncludeIterations">
            <summary>
            When set to true, the data of the iterations is included in the export.
            </summary>
        </member>
        <member name="P:TinyBenchmark.TextExporter.IndentLevel">
            <summary>
            Defines an indentation level for the text.
            </summary>
        </member>
        <member name="M:TinyBenchmark.TextExporter.Visit(TinyBenchmark.BenchmarksContainerReport)">
            <summary>
            Visits a benchmarks container report to create an export.
            </summary>
            <param name="cr">The benchmarks container report.</param>
        </member>
        <member name="M:TinyBenchmark.TextExporter.Visit(TinyBenchmark.BenchmarkReport)">
            <summary>
            Visits a benchmark report to create an export.
            </summary>
            <param name="r">The benchmark report.</param>
        </member>
        <member name="M:TinyBenchmark.TextExporter.Visit(TinyBenchmark.IterationReport)">
            <summary>
            Visits a benchmark iteration report to create an export.
            </summary>
            <param name="ir">The benchmark iteration report.</param>
        </member>
        <member name="M:TinyBenchmark.TextExporter.GetText">
            <summary>
            Creates the text export.
            </summary>
            <returns>The text export.</returns>
        </member>
        <member name="M:TinyBenchmark.TextExporter.AppendLine(System.String)">
            <summary>
            Appends a line to the export prefixed with the defined <see cref="P:TinyBenchmark.TextExporter.IndentLevel"/>.
            </summary>
            <param name="text">The text to append to the export.</param>
        </member>
        <member name="M:TinyBenchmark.TextExporter.Append(System.String)">
            <summary>
            Appends the text to the export prefixed with the defined <see cref="P:TinyBenchmark.TextExporter.IndentLevel"/>.
            </summary>
            <param name="text">The text to append to the export.</param>
        </member>
        <member name="M:TinyBenchmark.TextExporter.Format(System.DateTime)">
            <summary>
            Formats a DateTime.
            </summary>
            <param name="dateTime">The value to format as text.</param>
            <returns>The text format of the value.</returns>
        </member>
        <member name="M:TinyBenchmark.TextExporter.FormatAsLocal(System.DateTime)">
            <summary>
            Formats a DateTime as a local time.
            </summary>
            <param name="dateTime">The value to format as text.</param>
            <returns>The text format of the value.</returns>
        </member>
        <member name="M:TinyBenchmark.TextExporter.Format(System.TimeSpan)">
            <summary>
            Formats a TimeSpan.
            </summary>
            <param name="timeSpan">The value to format as text.</param>
            <returns>The text format of the value.</returns>
        </member>
        <member name="M:TinyBenchmark.TextExporter.FormatRatio(System.Decimal)">
            <summary>
            Formats a value as a ratio.
            </summary>
            <param name="ratio">The value to format as text.</param>
            <returns>The text format of the value.</returns>
        </member>
        <member name="M:TinyBenchmark.TextExporter.FormatEfficiency(System.Decimal)">
            <summary>
            Formats a value as an efficiency indicator.
            </summary>
            <param name="ratio">The value to format as text.</param>
            <returns>The text format of the value.</returns>
        </member>
        <member name="T:TinyBenchmark.IBenchmarkOutput">
            <summary>
            A benchmark-aware facade used to handle benchmark's logs.
            </summary>
        </member>
        <member name="M:TinyBenchmark.IBenchmarkOutput.WriteLine(System.String)">
            <summary>
            Writes a new line with the log message, if the configuration enables it.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="T:TinyBenchmark.BenchmarkOutput">
            <summary>
            The main <see cref="T:TinyBenchmark.IBenchmarkOutput"/> implementation used internally by the library to output execution logs.
            It supports the definition of the indent level, in order to format a series of related logs.
            </summary>
        </member>
        <member name="M:TinyBenchmark.BenchmarkOutput.#ctor(TinyBenchmark.OutputLevel)">
            <summary>
            Creates a new instance given the max output level defined by the configuration.
            </summary>
            <param name="maxOutputLevel">The max output level.</param>
        </member>
        <member name="M:TinyBenchmark.BenchmarkOutput.IsShown(TinyBenchmark.OutputLevel)">
            <summary>
            Checks the level against the max output level defined by the configuration: returns true when a log with the given level
            can be sent to the output.
            </summary>
            <param name="level">The log level to evaluate.</param>
            <returns>True when a log with the given level can be sent to the output, false otherwise.</returns>
        </member>
        <member name="M:TinyBenchmark.BenchmarkOutput.TinyBenchmark#IBenchmarkOutput#WriteLine(System.String)">
            <summary>
            Writes a new line with the log message with a Verbose level.
            This method is invoked by the benchmarks.
            </summary>
            <param name="message">The log message.</param>
        </member>
        <member name="M:TinyBenchmark.BenchmarkOutput.WriteLine(TinyBenchmark.OutputLevel,System.String)">
            <summary>
            Writes a new line with the log message with the given log, if the configuration allows it.
            </summary>
            <param name="outputLevel"></param>
            <param name="message">The log message.</param>
        </member>
        <member name="M:TinyBenchmark.BenchmarkOutput.ProgressFor(TinyBenchmark.OutputLevel,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:TinyBenchmark.ProgressWriter"/> with the log configuration of this <see cref="T:TinyBenchmark.BenchmarkOutput"/> instance.
            </summary>
            <param name="outputLevel">The output level that the progress will write logs with.</param>
            <param name="totalItems">The total items that the execution tracked by this writer will process.</param>
            <param name="progressLength">The length of the text progress bar, in characters.</param>
            <returns></returns>
        </member>
        <member name="T:TinyBenchmark.ProgressWriter">
            <summary>
            Writes a text progress bar.
            </summary>
        </member>
        <member name="M:TinyBenchmark.ProgressWriter.#ctor(System.Int32,System.Action{System.String},System.Char,System.Char,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="totalItems">The total items that the execution tracked by this writer will process.</param>
            <param name="writer">A delegate that handles the progress message.</param>
            <param name="progressChar">The character used to identify the progress.</param>
            <param name="emptyChar">The character used to identify the remaining work.</param>
            <param name="progressLength">The length of the text progress bar, in characters.</param>
        </member>
        <member name="T:TinyBenchmark.OutputLevel">
            <summary>
            Defines which kind of logs should be displayed during execution.
            </summary>
        </member>
        <member name="F:TinyBenchmark.OutputLevel.Silent">
            <summary>
            No logs.
            </summary>
        </member>
        <member name="F:TinyBenchmark.OutputLevel.ErrorsOnly">
            <summary>
            Only logs indicating errors.
            </summary>
        </member>
        <member name="F:TinyBenchmark.OutputLevel.Minimal">
            <summary>
            Logs with minimal information about the execution.
            </summary>
        </member>
        <member name="F:TinyBenchmark.OutputLevel.Normal">
            <summary>
            Informative logs with information about the steps of the execution.
            </summary>
        </member>
        <member name="F:TinyBenchmark.OutputLevel.Verbose">
            <summary>
            Rich logs with many details about the steps of the execution.
            </summary>
        </member>
        <member name="T:TinyBenchmark.IReport">
            <summary>
            Defines a report that can be exported.
            </summary>
        </member>
        <member name="M:TinyBenchmark.IReport.Accept(TinyBenchmark.IExporter)">
            <summary>
            Accepts an exporter.
            </summary>
            <param name="exporter">The exporter.</param>
        </member>
    </members>
</doc>
